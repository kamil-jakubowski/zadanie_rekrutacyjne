<?php

namespace App\Tests\Unit\Product\Application\Command\CreateProduct;

use App\Product\Application\Command\CreateProduct\CreateProductCommand;
use App\Product\Application\Command\CreateProduct\CreateProductHandler;
use App\Product\Domain\ProductRepositoryInterface;
use App\Product\Infrastructure\Doctrine\Exception\ProductRepositoryException;
use App\Tests\Helper\ProductTestHelper;
use PHPUnit\Framework\TestCase;

class CreateProductHandlerTest extends TestCase
{
    use ProductTestHelper;

    public function testCreationShouldSuccess(): void
    {
        // given
        $commandSpy = new class($this->generateValidProductName(), $this->generateValidPrice()) extends CreateProductCommand {

            public bool $visited = false;

          public function setNewResourceUuid(string $uuid): void
          {
              $this->visited = true;
              parent::setNewResourceUuid($uuid); // TODO: Change the autogenerated stub
          }
        };
        $productRepositoryMock = $this->createMock(ProductRepositoryInterface::class);
        $handler = new CreateProductHandler($productRepositoryMock);

        // then
        $productRepositoryMock->expects($this->once())
            ->method('addProduct');

        // when
        $handler($commandSpy);

        // then
        $this->assertTrue($commandSpy->visited);
    }
}
